{"version":3,"sources":["components/Navbar.js","components/Home.js","components/Worldwide.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","exact","path","to","Home","state","indiaCases","states","axios","get","then","res","setState","data","statewise","slice","length","india","this","Container","Row","Col","xs","md","end","confirmed","duration","active","recovered","deaths","Spinner","animation","role","stateTable","map","cstate","React","Component","Worldwide","Footer","href","App","basename","excat","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7692839f.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { NavLink } from \"react-router-dom\"\r\nimport \"./Navbar.css\"\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <div>\r\n            <nav className=\"my-nav\">\r\n                <h2>Covid-19 Tracker</h2>\r\n                <div className=\"navlinks\">\r\n                        <div className=\"navlink\"> <NavLink exact path to=\"/\">India</NavLink> </div>\r\n                        <div className=\"navlink\"> <NavLink path to=\"/worldwide\">Worldwide</NavLink> </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Navbar","import React from \"react\"\r\nimport axios from \"axios\"\r\nimport { Container, Row, Col, Spinner } from \"react-bootstrap\"\r\nimport Countup from \"react-countup\"\r\nimport \"./Home.css\"\r\n\r\nclass Home extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            indiaCases: null,\r\n            states: []\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        axios.get(\"https://api.covid19india.org/data.json\")\r\n            .then(res => {\r\n                this.setState({\r\n                    indiaCases: res.data.statewise[0],\r\n                    states: res.data.statewise.slice(1, res.data.statewise.length)\r\n                })\r\n            })\r\n    }\r\n\r\n\r\n    render() {\r\n        const india = this.state.indiaCases ? (\r\n            <Container>\r\n                <Row className={\"total-data\"}>\r\n                    <Col xs={6} md={3}>\r\n                        <div className=\"total\"><h2>Total</h2>\r\n                            <br />\r\n                            <h3><Countup end={this.state.indiaCases.confirmed} duration={1.5} /></h3>\r\n                        </div>\r\n                        <br /> <br />\r\n                    </Col>\r\n                    <Col xs={6} md={3}>\r\n                        <div className=\"active\"><h2>Active</h2>\r\n                            <br />\r\n                            <h3><Countup end={this.state.indiaCases.active} duration={1.5} /></h3>\r\n                        </div>\r\n                        <br /> <br />\r\n                    </Col>\r\n                    <Col xs={6} md={3}>\r\n                        <div className=\"recovered\"><h2>Recovered</h2>\r\n                            <br />\r\n                            <h3><Countup end={this.state.indiaCases.recovered} duration={1.5} /></h3>\r\n\r\n                        </div>\r\n                        <br /> <br />\r\n                    </Col>\r\n                    <Col xs={6} md={3}>\r\n                        <div className=\"deaths\"><h2>Deaths</h2>\r\n                            <br />\r\n                            <h3><Countup end={this.state.indiaCases.deaths} duration={1.5} /></h3>\r\n                        </div>\r\n                        <br /> <br />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        ) : (\r\n                <Spinner animation=\"border\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </Spinner>\r\n            )\r\n\r\n        const stateTable = this.state.states ? (\r\n            this.state.states.map(cstate => {\r\n                return (\r\n                    <tr className=\"data\">\r\n                        <td className=\"state\">{cstate.state}</td>\r\n                        <td className=\"total\">{cstate.confirmed}</td>\r\n                        <td className=\"active\">{cstate.active}</td>\r\n                        <td className=\"recovered\">{cstate.recovered}</td>\r\n                        <td className=\"deaths\">{cstate.deaths}</td>\r\n                    </tr>\r\n                )\r\n            })\r\n        ) : (\r\n                <Spinner animation=\"border\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </Spinner >\r\n            )\r\n\r\n\r\n        return (\r\n            <div className=\"home\">\r\n                <div className=\"title\"><h1>Covid-19 cases in India</h1></div>\r\n                <hr/>\r\n                <br />\r\n                {india}\r\n                <br />\r\n                <table className=\"statesCases\">\r\n                    <tr>\r\n                        <th className=\"state state-t\">state</th>\r\n                        <th className=\"total total-t\">total</th>\r\n                        <th className=\"active active-t\">active</th>\r\n                        <th className=\"recovered recovered-t\">recovered</th>\r\n                        <th className=\"deaths deaths-t\">deaths</th>\r\n                    </tr>\r\n                    <br />\r\n                    {stateTable}\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home","import React from \"react\"\r\n\r\nclass Worldwide extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Covid-19 data from around the world will soon be added!</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Worldwide","import React from \"react\"\r\nimport \"./Footer.css\"\r\n\r\nfunction Footer () {\r\n    return (\r\n        <div className=\"footer\">\r\n            <span className=\"footer-text\">Developed by Piyush &nbsp;&nbsp; | &nbsp;&nbsp; Data from <a href=\"https://www.covid19india.org/\">covid19india.org</a></span>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Footer","import React from \"react\"\nimport { HashRouter, Route, Switch } from \"react-router-dom\"\nimport Navbar from \"./components/Navbar\"\nimport Home from \"./components/Home\"\nimport Worldwide from \"./components/Worldwide\"\nimport \"./universal.css\"\nimport Footer from \"./components/Footer\"\n\nclass App extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<HashRouter basename=\"/\">\n\t\t\t\t\t<Navbar />\n\t\t\t\t\t<br /> <br />\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route excat path=\"/\" component={Home} />\n\t\t\t\t\t\t<Route path=\"/worldwide\" component={Worldwide} />\n\t\t\t\t\t</Switch>\n\t\t\t\t\t<Footer />\n\t\t\t\t</HashRouter>\n\t\t\t</div>\n\t\t)\n\t}\n\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}